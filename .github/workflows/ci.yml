name: CI
on:
  push:
    branches: [ implementation ]
  pull_request:
    branches: [ implementation ]

jobs:
  backend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [identity, registry, eligibility, payment, analytics]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r services/${{ matrix.service }}/requirements.txt
          pip install pytest httpx pytest-asyncio pytest-testcontainers testcontainers[postgresql] testcontainers[kafka] pytest-cov
      - name: Run unit tests with coverage
        run: |
          pytest -v --cov=services/${{ matrix.service }}/app --cov-report=xml --cov-report=term services/${{ matrix.service }}/tests
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: ${{ matrix.service }}
          name: ${{ matrix.service }}-coverage

  e2e-backend:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install deps (aggregate)
        run: |
          python -m pip install --upgrade pip
          pip install -r services/registry/requirements.txt
          pip install -r services/eligibility/requirements.txt
          pip install -r services/payment/requirements.txt
          pip install -r services/analytics/requirements.txt
          pip install pytest httpx pytest-asyncio pytest-testcontainers testcontainers[postgresql] testcontainers[kafka] pytest-timeout
      - name: Run comprehensive e2e tests with Testcontainers
        env:
          OTEL_ENABLE: "0"
          ENVIRONMENT: "test"
        run: |
          # Run saga flow tests with timeout
          pytest -v --timeout=300 services/tests_e2e/test_saga_with_testcontainers.py
          # Run existing e2e tests
          pytest -v --timeout=180 services/tests_e2e -k "full_saga_end_to_end or idempotency"

  security-validation:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - name: Compose up (DBs, services, gateway) with security enforcement
        run: |
          docker compose up -d --build postgres mongo redis
          # Start services with ALLOW_INSECURE_LOCAL=0 to enforce JWT
          ENVIRONMENT=staging ALLOW_INSECURE_LOCAL=0 docker compose up -d --build registry payment analytics identity eligibility kong
          # wait for kong and services
          for i in {1..60}; do curl -sf http://localhost:8000/ -o /dev/null && break || sleep 1; done
          for i in {1..30}; do curl -sf http://localhost:8002/health && break || sleep 1; done
          for i in {1..30}; do curl -sf http://localhost:8004/health && break || sleep 1; done
          for i in {1..30}; do curl -sf http://localhost:8005/health && break || sleep 1; done
      - name: Run security validation
        env:
          ENVIRONMENT: staging
          KONG_ADMIN_URL: http://localhost:8001
          KONG_PROXY_URL: http://localhost:8000
        run: |
          chmod +x scripts/validate-security.sh
          ./scripts/validate-security.sh
      - name: Cleanup
        if: always()
        run: docker compose down -v

  integration:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - name: Compose up (DBs, services, gateway)
        run: |
          docker compose up -d --build postgres mongo redis
          ALLOW_INSECURE_LOCAL=1 docker compose up -d --build registry payment analytics identity eligibility kong
          # wait for kong and services
          for i in {1..60}; do curl -sf http://localhost:8000/ -o /dev/null && break || sleep 1; done
          for i in {1..30}; do curl -sf http://localhost:8002/health && break || sleep 1; done
          for i in {1..30}; do curl -sf http://localhost:8004/health && break || sleep 1; done
          for i in {1..30}; do curl -sf http://localhost:8005/health && break || sleep 1; done
      - name: API smoke tests via Kong (dev mode)
        run: |
          # Health via direct services (open)
          curl -f http://localhost:8002/health
          # In dev mode, some endpoints might be accessible, but Kong should still be active
          test $(curl -s -o /dev/null -w "%{http_code}" http://localhost:8001/plugins) -eq 200 || exit 1
      - name: k6 perf smoke
        run: |
          docker run --rm --network host -v "$PWD/infra/perf/k6":/scripts grafana/k6 run /scripts/smoke.js
      - name: Cleanup
        if: always()
        run: docker compose down -v

  docker-images:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push images
        run: |
          services=(identity registry eligibility payment analytics)
          for svc in "${services[@]}"; do
            image="ghcr.io/${{ github.repository_owner }}/$svc:sha-${{ github.sha }}"
            docker build -f infra/docker/Dockerfile.fastapi --build-arg SERVICE_PATH=services/$svc -t "$image" .
            docker push "$image"
          done

  database-migrations:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Start PostgreSQL
        run: |
          docker run -d --name postgres-test \
            -e POSTGRES_DB=dsrs_test \
            -e POSTGRES_USER=test \
            -e POSTGRES_PASSWORD=test123 \
            -p 5432:5432 \
            postgres:15-alpine
          # Wait for PostgreSQL to be ready
          for i in {1..30}; do
            if docker exec postgres-test pg_isready -U test -d dsrs_test; then
              break
            fi
            sleep 1
          done
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install alembic psycopg2-binary sqlalchemy
      - name: Test migrations for all services
        env:
          DATABASE_URL: postgresql+psycopg://test:test123@localhost:5432/dsrs_test
        run: |
          chmod +x scripts/run-migrations.sh
          ./scripts/run-migrations.sh
      - name: Cleanup
        if: always()
        run: docker stop postgres-test && docker rm postgres-test

  kustomize-verify:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install kustomize
        run: |
          curl -sL https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv5.5.0/kustomize_v5.5.0_linux_amd64.tar.gz | tar xz
          sudo mv kustomize /usr/local/bin/
      - name: Render staging overlay
        run: |
          kustomize build infra/kustomize/overlays/staging | head -n 50
      - name: Validate security configuration
        run: |
          # Check that staging overlay doesn't have ALLOW_INSECURE_LOCAL
          if kustomize build infra/kustomize/overlays/staging | grep -q "ALLOW_INSECURE_LOCAL"; then
            echo "❌ FAIL: ALLOW_INSECURE_LOCAL found in staging overlay"
            exit 1
          else
            echo "✅ PASS: No ALLOW_INSECURE_LOCAL in staging overlay"
          fi
          # Check that production overlay doesn't have ALLOW_INSECURE_LOCAL
          if kustomize build infra/kustomize/overlays/prod | grep -q "ALLOW_INSECURE_LOCAL"; then
            echo "❌ FAIL: ALLOW_INSECURE_LOCAL found in production overlay"
            exit 1
          else
            echo "✅ PASS: No ALLOW_INSECURE_LOCAL in production overlay"
          fi

  frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: web
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - run: npm ci
      - run: npm run build

  e2e-frontend:
    runs-on: ubuntu-latest
    needs: [frontend]
    steps:
      - uses: actions/checkout@v4
      - name: Start backend stack (registry, analytics)
        run: |
          docker compose up -d --build postgres mongo redis registry analytics
          for i in {1..30}; do curl -sf http://localhost:8002/health && break || sleep 1; done
          for i in {1..30}; do curl -sf http://localhost:8005/health && break || sleep 1; done
      - name: Build and start web
        working-directory: web
        run: |
          npm ci
          npm install -D @playwright/test
          npm run build
          nohup npm run start -- -p 3000 >/dev/null 2>&1 &
          for i in {1..30}; do curl -sf http://localhost:3000/ && break || sleep 1; done
      - name: Install Playwright browsers
        working-directory: web
        run: npx playwright install --with-deps
      - name: Run Playwright tests
        working-directory: web
        run: npx playwright test --reporter=line
      - name: Compose down
        if: always()
        run: docker compose down -v
