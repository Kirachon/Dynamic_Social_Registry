name: CI
on:
  push:
    branches: [ implementation ]
  pull_request:
    branches: [ implementation ]

jobs:
  backend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [identity, registry, eligibility, payment, analytics]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r services/${{ matrix.service }}/requirements.txt
          pip install pytest httpx pytest-asyncio pytest-testcontainers testcontainers[postgresql] testcontainers[kafka]
      - name: Run unit tests
        run: pytest -q services/${{ matrix.service }}/tests

  e2e-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install deps (aggregate)
        run: |
          python -m pip install --upgrade pip
          pip install -r services/registry/requirements.txt
          pip install -r services/eligibility/requirements.txt
          pip install -r services/payment/requirements.txt
          pip install pytest httpx pytest-asyncio pytest-testcontainers testcontainers[postgresql] testcontainers[kafka]
      - name: Run e2e tests (bounded)
        env:
          OTEL_ENABLE: "0"
        run: pytest -q services/tests_e2e -k "full_saga_end_to_end or idempotency" -q

  integration:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Compose up (DBs, services, gateway)
        run: |
          docker compose up -d --build postgres mongo redis
          ALLOW_INSECURE_LOCAL=0 docker compose up -d --build registry payment analytics identity eligibility kong
          # wait for kong and services
          for i in {1..60}; do curl -sf http://localhost:8000/ -o /dev/null && break || sleep 1; done
          for i in {1..30}; do curl -sf http://localhost:8002/health && break || sleep 1; done
          for i in {1..30}; do curl -sf http://localhost:8004/health && break || sleep 1; done
          for i in {1..30}; do curl -sf http://localhost:8005/health && break || sleep 1; done
      - name: API smoke tests via Kong (auth enforced)
        run: |
          # Health via direct services (open)
          curl -f http://localhost:8002/health
          # Protected endpoints via Kong should be 401 without Authorization
          test $(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/registry/api/v1/households) -eq 401 || exit 1
          test $(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/payment/api/v1/payments) -eq 401 || exit 1
          test $(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/analytics/api/v1/analytics/summary) -eq 401 || exit 1
          # Ensure Kong jwt plugin is active by checking Admin API plugins list
          test $(curl -s -o /dev/null -w "%{http_code}" http://localhost:8001/plugins) -eq 200 || exit 1
      - name: k6 perf smoke
        run: |
          docker run --rm --network host -v "$PWD/infra/perf/k6":/scripts grafana/k6 run /scripts/smoke.js

  docker-images:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push images
        run: |
          services=(identity registry eligibility payment analytics)
          for svc in "${services[@]}"; do
            image="ghcr.io/${{ github.repository_owner }}/$svc:sha-${{ github.sha }}"
            docker build -f infra/docker/Dockerfile.fastapi --build-arg SERVICE_PATH=services/$svc -t "$image" .
            docker push "$image"
          done

  kustomize-verify:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install kustomize
        run: |
          curl -sL https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv5.5.0/kustomize_v5.5.0_linux_amd64.tar.gz | tar xz
          sudo mv kustomize /usr/local/bin/
      - name: Render staging overlay
        run: |
          kustomize build infra/kustomize/overlays/staging | head -n 50

  frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: web
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - run: npm ci
      - run: npm run build

  e2e-frontend:
    runs-on: ubuntu-latest
    needs: [frontend]
    steps:
      - uses: actions/checkout@v4
      - name: Start backend stack (registry, analytics)
        run: |
          docker compose up -d --build postgres mongo redis registry analytics
          for i in {1..30}; do curl -sf http://localhost:8002/health && break || sleep 1; done
          for i in {1..30}; do curl -sf http://localhost:8005/health && break || sleep 1; done
      - name: Build and start web
        working-directory: web
        run: |
          npm ci
          npm install -D @playwright/test
          npm run build
          nohup npm run start -- -p 3000 >/dev/null 2>&1 &
          for i in {1..30}; do curl -sf http://localhost:3000/ && break || sleep 1; done
      - name: Install Playwright browsers
        working-directory: web
        run: npx playwright install --with-deps
      - name: Run Playwright tests
        working-directory: web
        run: npx playwright test --reporter=line
      - name: Compose down
        if: always()
        run: docker compose down -v
