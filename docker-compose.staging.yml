version: '3.8'

services:
  # Frontend - Staging Configuration
  web:
    build:
      context: ./web
      dockerfile: Dockerfile
      target: production
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_BASE=https://api-staging.dsrs.gov.ph
      - NEXTAUTH_URL=https://staging.dsrs.gov.ph
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - KEYCLOAK_ISSUER=https://auth-staging.dsrs.gov.ph/realms/dsrs
      - KEYCLOAK_CLIENT_ID=dsrs-web-staging
      - KEYCLOAK_CLIENT_SECRET=${KEYCLOAK_CLIENT_SECRET_STAGING}
    ports:
      - "3000:3000"
    depends_on:
      - kong
    networks:
      - dsrs-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kong - Staging Configuration
  kong:
    image: kong:3.4-alpine
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=postgres
      - KONG_PG_USER=${KONG_PG_USER}
      - KONG_PG_PASSWORD=${KONG_PG_PASSWORD}
      - KONG_PG_DATABASE=kong_staging
      - KONG_DECLARATIVE_CONFIG=/kong/kong-staging.yml
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001
      - KONG_PLUGINS=bundled,cors,rate-limiting,jwt,prometheus
    volumes:
      - ./infra/kong/kong-staging.yml:/kong/kong-staging.yml:ro
    ports:
      - "8000:8000"
      - "8001:8001"
    depends_on:
      - postgres
    networks:
      - dsrs-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Keycloak - Staging Configuration
  keycloak:
    image: quay.io/keycloak/keycloak:22.0
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD}
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://postgres:5432/keycloak_staging
      - KC_DB_USERNAME=${KEYCLOAK_DB_USER}
      - KC_DB_PASSWORD=${KEYCLOAK_DB_PASSWORD}
      - KC_HOSTNAME=auth-staging.dsrs.gov.ph
      - KC_HOSTNAME_STRICT=false
      - KC_HTTP_ENABLED=true
      - KC_PROXY=edge
      - KC_FEATURES=token-exchange,admin-fine-grained-authz
    command: start
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    networks:
      - dsrs-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 5

  # PostgreSQL - Staging Configuration
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=dsrs_staging
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_MULTIPLE_DATABASES=kong_staging,keycloak_staging
    volumes:
      - postgres_staging_data:/var/lib/postgresql/data
      - ./scripts/create-multiple-databases.sh:/docker-entrypoint-initdb.d/create-multiple-databases.sh:ro
    ports:
      - "5432:5432"
    networks:
      - dsrs-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d dsrs_staging"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB - Staging Configuration
  mongodb:
    image: mongo:7.0
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=dsrs_staging
    volumes:
      - mongodb_staging_data:/data/db
      - ./scripts/mongo-init-staging.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    ports:
      - "27017:27017"
    networks:
      - dsrs-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka - Staging Configuration
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_LOG_RETENTION_HOURS=168
      - KAFKA_LOG_RETENTION_BYTES=1073741824
    volumes:
      - kafka_staging_data:/var/lib/kafka/data
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    networks:
      - dsrs-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Zookeeper - Staging Configuration
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
      - ZOOKEEPER_SYNC_LIMIT=2
    volumes:
      - zookeeper_staging_data:/var/lib/zookeeper/data
      - zookeeper_staging_logs:/var/lib/zookeeper/log
    ports:
      - "2181:2181"
    networks:
      - dsrs-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Microservices - Staging Configuration
  registry:
    build:
      context: ./services/registry
      dockerfile: Dockerfile
    environment:
      - ENVIRONMENT=staging
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/dsrs_staging
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_TOPIC_PREFIX=dsrs-staging
      - LOG_LEVEL=INFO
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4317
      - PROMETHEUS_MULTIPROC_DIR=/tmp/prometheus
    depends_on:
      - postgres
      - kafka
    networks:
      - dsrs-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  eligibility:
    build:
      context: ./services/eligibility
      dockerfile: Dockerfile
    environment:
      - ENVIRONMENT=staging
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/dsrs_staging
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_TOPIC_PREFIX=dsrs-staging
      - LOG_LEVEL=INFO
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4317
      - PROMETHEUS_MULTIPROC_DIR=/tmp/prometheus
    depends_on:
      - postgres
      - kafka
    networks:
      - dsrs-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  payment:
    build:
      context: ./services/payment
      dockerfile: Dockerfile
    environment:
      - ENVIRONMENT=staging
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/dsrs_staging
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_TOPIC_PREFIX=dsrs-staging
      - LOG_LEVEL=INFO
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4317
      - PROMETHEUS_MULTIPROC_DIR=/tmp/prometheus
    depends_on:
      - postgres
      - kafka
    networks:
      - dsrs-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  analytics:
    build:
      context: ./services/analytics
      dockerfile: Dockerfile
    environment:
      - ENVIRONMENT=staging
      - MONGODB_URL=mongodb://${MONGO_ROOT_USER}:${MONGO_ROOT_PASSWORD}@mongodb:27017/dsrs_staging
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_TOPIC_PREFIX=dsrs-staging
      - LOG_LEVEL=INFO
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4317
      - PROMETHEUS_MULTIPROC_DIR=/tmp/prometheus
    depends_on:
      - mongodb
      - kafka
    networks:
      - dsrs-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring - Staging Configuration
  prometheus:
    image: prom/prometheus:v2.45.0
    command:
      - '--config.file=/etc/prometheus/prometheus-staging.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus/prometheus-staging.yml:/etc/prometheus/prometheus-staging.yml:ro
      - ./monitoring/prometheus/alerts.yml:/etc/prometheus/alerts.yml:ro
      - prometheus_staging_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - dsrs-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:10.0.0
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
      - GF_SERVER_DOMAIN=monitoring-staging.dsrs.gov.ph
      - GF_SERVER_ROOT_URL=https://monitoring-staging.dsrs.gov.ph
    volumes:
      - grafana_staging_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - dsrs-network
    restart: unless-stopped

volumes:
  postgres_staging_data:
  mongodb_staging_data:
  kafka_staging_data:
  zookeeper_staging_data:
  zookeeper_staging_logs:
  prometheus_staging_data:
  grafana_staging_data:

networks:
  dsrs-network:
    driver: bridge
